boolean turn=true;
int[] a;
String Winner;
boolean aistart;
int start=0;

void setup() // 게임 기본 틀 구성
{
  a=new int[9];
  size(800, 600);
  background(255);


  fill(0);
  stroke(0);
  strokeWeight(4);
  line(200, 0, 200, 600);
  line(400, 0, 400, 600);
  line(0, 200, 600, 200);
  line(0, 400, 600, 400);
  line(600, 0, 600, 600);
  noStroke();
  ellipseMode(CORNER);
  fill(0);
  textSize(20);
  text("1 : Start First\n2 : Start Second", 620,30);
  text("R : Reset Game", 620, 100);
}

void draw() // 항상 반복
{
  if(start==1){
    if (turn==false) {
      move(1);
    }
    for (int i=0; i<3; i++)
    {
      for (int j=0; j<3; j++)
      {
        if (a[i+j*3]==-1)
        {
          fill(255, 0, 0);
          ellipse(i*200+20, j*200+20, 160, 160);
        } else if (a[i+j*3]==1)
        {
          fill(0, 0, 255);
          ellipse(i*200+20, j*200+20, 160, 160);
        }
      }
    }
  }
}
int MiniMax(int[] board, int depth, boolean isMaximizing) { // 미니맥스 알고리즘
  int score = Evaluate(board, false);
  if (score == 10) { 
    return score - depth;
  } 
  if (score == -10) { 
    return score + depth;
  }
  if (MovesLeft(board) == 0) { 
    return 0;
  }
  if (isMaximizing) {
    int best = -100;

    for (int i = 0; i < board.length; i++) {
      if (board[i] == 0) {
        board[i] = 1;
        best = Math.max(best, MiniMax(board, depth + 1, !isMaximizing));
        board[i] = 0;
      }
    }
    return (best - depth);
  } else {
    int best = 100;

    for (int i = 0; i < board.length; i++) {
      if (board[i] == 0) {
        board[i] = -1;
        best = Math.min(best, MiniMax(board, depth + 1, !isMaximizing));
        board[i] = 0;
      }
    }
    return (best + depth);
  }
}
void mouseClicked() { // 마우스를 클릭했을 때 실행
  if (turn==true && start==1) {
    int x=0;
    int y=0;
    if (mouseX>200) x=x+200;
    if (mouseX>400) x=x+200;
    if (mouseY>200) y=y+200;
    if (mouseY>400) y=y+200;
    ellipse(x+20, y+20, 160, 160);
    if (a[(x/200)+(y/200)*3]==0) {
      a[(x/200)+(y/200)*3]=-1;
      turn=false;
    }
  }
}
void keyPressed() { // 키보드를 눌렀을 때
  if(keyCode=='R') { // R 누르면 다시 시작
    setup();
    start=0;
  }
  if(keyCode=='1' && start==0) { // 1 누르면 먼저 시작
    turn=true;
    start=1;
  }
  if(keyCode=='2' && start==0) { //2 누르면 나중에 시작
    turn=false;
    start=1;
  }
}
void move(int player) { // 인공지능이 움직이는 함수
  if (Winner == null) { 
    int bestMove = -100;
    int move=-1;
    for (int i = 0; i < a.length; i++) {
      if (a[i] == 0) {
        a[i] = player;
        int currentMove = MiniMax(a, 0, aistart);
        a[i] = 0;
        if (currentMove > bestMove) {
          bestMove = currentMove;
          move=i;
        }
      }
    }
   if (MovesLeft(a) != 0)
    {
      a[move]=1;
    }
    Evaluate(a, true);
    turn = true;
  }
}

int Evaluate(int[] board, boolean checkWin) // 승패 판정 함수
{
  int score = 0;

  if (board[1] != 0 && (board[1] == board[0] && board[1] == board[2])) { 
    score = (board[1] == 1) ? 10 : -10;
  }
  if (board[4] != 0 && (board[4] == board[3] && board[4] == board[5])) { 
    score = (board[4] == 1) ? 10 : -10;
  }
  if (board[7] != 0 && (board[7] == board[6] && board[7] == board[8])) { 
    score = (board[7] == 1) ? 10 : -10;
  }

  if (board[3] != 0 && (board[3] == board[0] && board[3] == board[6])) { 
    score = (board[3] == 1) ? 10 : -10;
  }
  if (board[4] != 0 && (board[4] == board[1] && board[4] == board[7])) { 
    score = (board[4] == 1) ? 10 : -10;
  }
  if (board[5] != 0 && (board[5] == board[2] && board[5] == board[8])) { 
    score = (board[5] == 1) ? 10 : -10;
  }

  if (board[4] != 0 && (board[4] == board[0] && board[4] == board[8])) { 
    score = (board[4] == 1) ? 10 : -10;
  }
  if (board[4] != 0 && (board[4] == board[2] && board[4] == board[6])) { 
    score = (board[4] == 1) ? 10 : -10;
  }

  return score;
}


int MovesLeft(int[] board) {  // 남은 칸 수 확인 함수
  int moves = 0;
  for (int i = 0; i < board.length; i++) { 
    if (board[i] == 0) { 
      moves += 1;
    }
  } 
  return moves;
